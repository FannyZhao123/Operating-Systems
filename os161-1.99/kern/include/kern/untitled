

	#if OPT_A3
	 // similar to sys__exit. However, the exit code/status will be different
		struct addrspace *as;
  		struct proc *p = curproc; 
  		lock_acquire(lock1);

		p->quit=__WSIGNALED;
		p->exitcode=_MKWAIT_SIG (sig);
		clean_pid(p->pid);

		KASSERT(curproc->p_addrspace != NULL);

		  if(p->parent==NULL || p->parent->pid==2){
		    as_deactivate();
		    /*
		     * clear p_addrspace before calling as_destroy. Otherwise if
		     * as_destroy sleeps (which is quite possible) when we
		     * come back we'll be calling as_activate on a
		     * half-destroyed address space. This tends to be
		     * messily fatal.
		     */
		    as = curproc_setas(NULL);
		    as_destroy(as);
		    cv_broadcast(p->wcv, lock1);
		    lock_release(lock1);
		    proc_remthread(curthread);
		    proc_destroy(p);
		  }
		  else{
		    cv_broadcast(p->wcv, lock1);
		    lock_release(lock1);
		    as_deactivate();
		    /*
		     * clear p_addrspace before calling as_destroy. Otherwise if
		     * as_destroy sleeps (which is quite possible) when we
		     * come back we'll be calling as_activate on a
		     * half-destroyed address space. This tends to be
		     * messily fatal.
		     */
		    as = curproc_setas(NULL);
		    as_destroy(as);
		    /* detach this thread from its process */
		    /* note: curproc cannot be used after this call */
		    proc_remthread(curthread);
		  }
		  /* if this is the last user process in the system, proc_destroy()
		     will wake up the kernel menu thread */
		  //proc_destroy(p);
		  
		  thread_exit();

	#endif /* OPT_A3 */
